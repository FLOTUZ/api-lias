generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aseguradora {
  id                          Int          @id @unique @default(autoincrement())
  nombre                      String       @unique
  telefono                    String       @db.VarChar(15)
  telefono_domestico          String?      @db.VarChar(15)
  telefono_vial               String?      @db.VarChar(15)
  telefono_whats              String?      @db.VarChar(15)
  kilometraje_permitido       Int?
  costo_por_kilometro         Decimal?     @db.Money
  costo_por_kilometro_foraneo Decimal?     @db.Money
  Asistencia                  Asistencia[]
  Ticket                      Ticket[]
  Asesor                      Asesor[]
  createdAt                   DateTime?    @default(now())
  updatedAt                   DateTime?
}

model Asistencia {
  id            Int          @id @unique @default(autoincrement())
  nombre        String
  aseguradoraId Int?
  Aseguradora   Aseguradora? @relation(fields: [aseguradoraId], references: [id])
  Ticket        Ticket[]
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?
}

model Ciudad {
  id        Int       @id @unique @default(autoincrement())
  nombre    String    @db.VarChar(100)
  latitud   Float?
  longitud  Float?
  estadoId  Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Tecnico   Tecnico[] //Tecnicos que dan servicio en esta ciudad
  ViveEn    Tecnico[] @relation("ResideEn") //Tecnicos que viven en esta ciudad
  Estado    Estado?   @relation(fields: [estadoId], references: [id])
  Ticket    Ticket[]
}

model Imagen {
  id          Int                 @id @unique @default(autoincrement())
  url         String
  descripcion String
  createdAt   DateTime?           @default(now())
  updatedAt   DateTime?           @updatedAt
  PreSolucion CotizacionTecnico[] @relation("PreSolucion")
}

model Seguimiento {
  id                   Int       @id @unique @default(autoincrement())
  nombre_asesor_seguro String
  detalles             String
  fecha_seguimiento    DateTime
  ticketId             Int
  usuarioId            Int
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  Ticket               Ticket    @relation(fields: [ticketId], references: [id])
  Usuario              Usuario   @relation(fields: [usuarioId], references: [id])
}

model Servicio {
  id        Int       @id @unique @default(autoincrement())
  nombre    String    @unique @db.VarChar(100)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  tipo      String
  Ticket    Ticket[]
  Tecnico   Tecnico[]
}

model Tecnico {
  id               Int                 @id @unique @default(autoincrement())
  nombre           String              @db.VarChar(50)
  apellido_paterno String              @db.VarChar(50)
  apellido_materno String              @db.VarChar(50)
  calificacion     Decimal             @default(0.0) @db.Decimal(2, 1)
  telefono         String              @db.VarChar(10)
  usuarioId        Int                 @unique
  ciudadId         Int
  createdAt        DateTime?           @default(now())
  updatedAt        DateTime?           @updatedAt
  Usuario          Usuario             @relation(fields: [usuarioId], references: [id])
  Ciudad           Ciudad[] //Ciudades que atiende
  Servicio         Servicio[]
  Cotizaciones     CotizacionTecnico[]
  ViveEn           Ciudad?             @relation("ResideEn", fields: [ciudadId], references: [id])
  Ticket           Ticket[]
}

model Ticket {
  id                     Int                 @id @unique @default(autoincrement())
  num_expediente         String              @unique
  asistencia_vial        Boolean
  fecha_llamada          DateTime
  nombre_asesor_gpo_lias String
  asesorId               Int?
  nombre_usuario_final   String
  titulo_ticket          String
  asistenciaId           Int
  aseguradoraId          Int
  problematica           String
  ciudadId               Int
  colonia                String
  calle                  String
  numero_domicilio       String?
  banderazo              Decimal?            @db.Money
  total_salida           Decimal             @db.Money
  cobertura              Decimal             @db.Money
  cotizacion_gpo_lias    String?
  deducible              Decimal             @db.Money
  kilometraje            Int
  costo_de_kilometraje   Decimal             @db.Money
  costo_por_caseta       Decimal?            @db.Money
  total                  Decimal             @db.Money
  anticipo               Decimal             @db.Money
  hora_cierre            DateTime?
  casetas                Int?
  costo_gpo_lias         Decimal             @db.Money
  estado                 String              @default("NUEVO")
  num_interior           String?             @db.VarChar(5)
  modelo_carro           String?             @db.VarChar(50)
  placas_carro           String?             @db.VarChar(10)
  color_carro            String?             @db.VarChar(50)
  marca_carro            String?             @db.VarChar(50)
  is_servicio_domestico  Boolean?            @default(false)
  is_servicio_foraneo    Boolean?            @default(false)
  tecnicoId              Int?
  createdAt              DateTime?           @default(now())
  updatedAt              DateTime?           @updatedAt
  Aseguradora            Aseguradora         @relation(fields: [aseguradoraId], references: [id])
  Asistencia             Asistencia          @relation(fields: [asistenciaId], references: [id])
  Servicio               Servicio[]
  Seguimiento            Seguimiento[]
  Usuario                Usuario[]
  CotizacionTecnico      CotizacionTecnico?
  Asesor                 Asesor?             @relation(fields: [asesorId], references: [id])
  Ciudad                 Ciudad              @relation(fields: [ciudadId], references: [id])
  Tecnico                Tecnico?            @relation(fields: [tecnicoId], references: [id])
  AcuerdoConformidad     AcuerdoConformidad?
}

model CotizacionTecnico {
  id                     Int       @id @unique @default(autoincrement())
  diagnostico_problema   String
  solucion_tecnico       String
  fecha_contacto         DateTime
  costo_mano_obra        Decimal   @db.Money
  costo_materiales       Decimal   @db.Money
  total_cotizacion       Decimal   @db.Money
  ticketId               Int       @unique
  tecnicoId              Int
  preSolucionId          Int?
  isAprobado             Boolean?  @default(false)
  aprobado_por_usuarioId Int?
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  Ticket                 Ticket    @relation(fields: [ticketId], references: [id])
  Tecnico                Tecnico   @relation(fields: [tecnicoId], references: [id])
  Aprobado_Por           Usuario?  @relation(fields: [aprobado_por_usuarioId], references: [id])
  //Imagen de antes de solucionar el problema
  PreSolucion            Imagen?   @relation("PreSolucion", fields: [preSolucionId], references: [id])

}

model AcuerdoConformidad {
  id                         Int           @id @unique @default(autoincrement())
  fecha_acuerdo              DateTime
  descripcion_problema       String
  direccion                  String
  observaciones              String?
  actividades_realizadas     String
  hora_recepcion_servicio    DateTime
  hora_llegada_servicio      DateTime
  hora_finalizacion_servicio DateTime
  acuerdo_firmado            String?
  is_aprobado                Boolean?      @default(false)
  ticketId                   Int           @unique
  usuarioFinalId             Int?
  createdAt                  DateTime?     @default(now())
  updatedAt                  DateTime?     @updatedAt
  UsuarioFinal               UsuarioFinal? @relation(fields: [usuarioFinalId], references: [id])
  Ticket                     Ticket        @relation(fields: [ticketId], references: [id])
}

model Usuario {
  id                    Int                 @id @unique @default(autoincrement())
  usuario               String              @unique @db.VarChar(20)
  email                 String              @unique @db.VarChar(100)
  password              String
  inactivo              Boolean?            @default(false)
  createdAt             DateTime?           @default(now())
  updatedAt             DateTime?           @updatedAt
  rol                   String              @default("USUARIO")
  Seguimiento           Seguimiento[]
  Tecnico               Tecnico?
  Ticket                Ticket[]
  CotizacionesAprobadas CotizacionTecnico[]
}

model UsuarioFinal {
  id                 Int                  @id @unique @default(autoincrement())
  nombre             String               @db.VarChar(50)
  apellido_paterno   String               @db.VarChar(50)
  apellido_materno   String               @db.VarChar(50)
  correo             String?              @db.VarChar(100)
  telefono           String               @db.VarChar(10)
  AcuerdoConformidad AcuerdoConformidad[]
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
}

model Estado {
  id        Int       @id @unique @default(autoincrement())
  nombre    String    @unique @db.VarChar(25)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Ciudad    Ciudad[]
}

model Asesor {
  id            Int         @id @unique @default(autoincrement())
  nombre        String      @db.VarChar(45)
  aseguradoraId Int
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  Aseguradora   Aseguradora @relation(fields: [aseguradoraId], references: [id])
  Ticket        Ticket[]
}
